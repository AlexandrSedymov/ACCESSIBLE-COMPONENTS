const FOCUSABLE_SELECTOR =
  'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';

const [isOpen, setIsOpen] = useState(false);
const closeButtonRef = useRef<HTMLButtonElement>(null);
const modalRef = useRef<HTMLDivElement>(null);
const modalTitleRef = useRef<HTMLHeadingElement>(null);
const triggerButtonRef = useRef<HTMLButtonElement>(null);

const openModal = () => setIsOpen(true);

const closeModal = () => {
  setIsOpen(false);
  // Restore focus to the trigger button after a brief delay
  setTimeout(() => {
    if (triggerButtonRef.current) {
      triggerButtonRef.current.focus();
    }
  }, 0);
};

const handleSubmit = () => {
  closeModal();
};

// Set initial focus when modal opens - focus the title for screen readers
useEffect(() => {
  if (isOpen && modalTitleRef.current) {
    modalTitleRef.current.focus();
  }
}, [isOpen]);

// Focus trapping logic
useEffect(() => {
  if (!isOpen || !modalRef.current) return;

  const modalElement = modalRef.current;
  const focusableElements = Array.from(modalElement.querySelectorAll(FOCUSABLE_SELECTOR));
  if (focusableElements.length === 0) return;

  const firstElement = focusableElements[0];
  const lastElement = focusableElements[focusableElements.length - 1];

  const handleKeyDown = (event: KeyboardEvent) => {
    if (event.key !== 'Tab') return;

    if (event.shiftKey) {
      if (document.activeElement === firstElement) {
        (lastElement as HTMLElement).focus();
        event.preventDefault();
      }
    } else {
      if (document.activeElement === lastElement) {
        (firstElement as HTMLElement).focus();
        event.preventDefault();
      }
    }
  };

  document.addEventListener('keydown', handleKeyDown);
  return () => document.removeEventListener('keydown', handleKeyDown);
}, [isOpen]);

// Handle ESC key
useEffect(() => {
  const handleEscapeKey = (event: KeyboardEvent) => {
    if (event.key === 'Escape' && isOpen) {
      closeModal();
    }
  };

  document.addEventListener('keydown', handleEscapeKey);
  return () => document.removeEventListener('keydown', handleEscapeKey);
}, [isOpen]);
